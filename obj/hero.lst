ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 1.
Hexadecimal [16-Bits]



                              1 .area _DATA
                              2 .area _CODE
                              3 
                              4 ;;====================
                              5 ;;====================
                              6 ;;PRIVATE DATA
                              7 ;;====================
                              8 ;;====================
                              9 
                             10 
                             11 ;;Hero Data
   0000 27                   12 hero_x: .db #39
   0001 50                   13 hero_y:	.db #80
   0002 FF                   14 hero_jump: .db #-1
   0003 00                   15 floor_x: .db #0
   0004 58                   16 floor_y: .db #88
   0005 4F                   17 contador: .db #79
                             18 
                             19 ;;Jump Table
   0006                      20 jumptable:
   0006 FD FE FF FF          21 	.db #-3, #-2, #-1, #-1
   000A FF 00 00 01          22 	.db #-1, #00, #00, #01
   000E 01 01 02 03          23 	.db #01, #01, #02, #03
   0012 80                   24 	.db #0x80
                             25 
                             26 ;;CPCtelera Symbols
                             27 .globl cpct_drawSolidBox_asm
                             28 .globl cpct_getScreenPtr_asm
                             29 .globl cpct_scanKeyboard_asm
                             30 .globl cpct_isKeyPressed_asm
                             31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 2.
Hexadecimal [16-Bits]



                             32 .include "keyboard/keyboard.s"
                              1 ;;-----------------------------LICENSE NOTICE------------------------------------
                              2 ;;  This file is part of CPCtelera: An Amstrad CPC Game Engine 
                              3 ;;  Copyright (C) 2014 ronaldo / Fremos / Cheesetea / ByteRealms (@FranGallegoBR)
                              4 ;;
                              5 ;;  This program is free software: you can redistribute it and/or modify
                              6 ;;  it under the terms of the GNU Lesser General Public License as published by
                              7 ;;  the Free Software Foundation, either version 3 of the License, or
                              8 ;;  (at your option) any later version.
                              9 ;;
                             10 ;;  This program is distributed in the hope that it will be useful,
                             11 ;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                             12 ;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                             13 ;;  GNU Lesser General Public License for more details.
                             14 ;;
                             15 ;;  You should have received a copy of the GNU Lesser General Public License
                             16 ;;  along with this program.  If not, see <http://www.gnu.org/licenses/>.
                             17 ;;-------------------------------------------------------------------------------
                             18 .module cpct_keyboard
                             19 
                             20 ;; bndry directive does not work when linking previously compiled files
                             21 ;.bndry 16
                             22 ;;   16-byte aligned in memory to let functions use 8-bit maths for pointing
                             23 ;;   (alignment not working on user linking)
                             24 
   0013                      25 _cpct_keyboardStatusBuffer:: .ds 10
                             26 
                             27 ;;
                             28 ;; Assembly constant definitions for keyboard mapping
                             29 ;;
                             30 
                             31 ;; Matrix Line 0x00
                     0100    32 .equ Key_CursorUp     ,#0x0100  ;; Bit 0 (01h) => | 0000 0001 |
                     0200    33 .equ Key_CursorRight  ,#0x0200  ;; Bit 1 (02h) => | 0000 0010 |
                     0400    34 .equ Key_CursorDown   ,#0x0400  ;; Bit 2 (04h) => | 0000 0100 |
                     0800    35 .equ Key_F9           ,#0x0800  ;; Bit 3 (08h) => | 0000 1000 |
                     1000    36 .equ Key_F6           ,#0x1000  ;; Bit 4 (10h) => | 0001 0000 |
                     2000    37 .equ Key_F3           ,#0x2000  ;; Bit 5 (20h) => | 0010 0000 |
                     4000    38 .equ Key_Enter        ,#0x4000  ;; Bit 6 (40h) => | 0100 0000 |
                     8000    39 .equ Key_FDot         ,#0x8000  ;; Bit 7 (80h) => | 1000 0000 |
                             40 ;; Matrix Line 0x01
                     0101    41 .equ Key_CursorLeft   ,#0x0101
                     0201    42 .equ Key_Copy         ,#0x0201
                     0401    43 .equ Key_F7           ,#0x0401
                     0801    44 .equ Key_F8           ,#0x0801
                     1001    45 .equ Key_F5           ,#0x1001
                     2001    46 .equ Key_F1           ,#0x2001
                     4001    47 .equ Key_F2           ,#0x4001
                     8001    48 .equ Key_F0           ,#0x8001
                             49 ;; Matrix Line 0x02
                     0102    50 .equ Key_Clr          ,#0x0102
                     0202    51 .equ Key_OpenBracket  ,#0x0202
                     0402    52 .equ Key_Return       ,#0x0402
                     0802    53 .equ Key_CloseBracket ,#0x0802
                     1002    54 .equ Key_F4           ,#0x1002
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 3.
Hexadecimal [16-Bits]



                     2002    55 .equ Key_Shift        ,#0x2002
                     4002    56 .equ Key_BackSlash    ,#0x4002
                     8002    57 .equ Key_Control      ,#0x8002
                             58 ;; Matrix Line 0x03
                     0103    59 .equ Key_Caret        ,#0x0103
                     0203    60 .equ Key_Hyphen       ,#0x0203
                     0403    61 .equ Key_At           ,#0x0403
                     0803    62 .equ Key_P            ,#0x0803
                     1003    63 .equ Key_SemiColon    ,#0x1003
                     2003    64 .equ Key_Colon        ,#0x2003
                     4003    65 .equ Key_Slash        ,#0x4003
                     8003    66 .equ Key_Dot          ,#0x8003
                             67 ;; Matrix Line 0x04
                     0104    68 .equ Key_0            ,#0x0104
                     0204    69 .equ Key_9            ,#0x0204
                     0404    70 .equ Key_O            ,#0x0404
                     0804    71 .equ Key_I            ,#0x0804
                     1004    72 .equ Key_L            ,#0x1004
                     2004    73 .equ Key_K            ,#0x2004
                     4004    74 .equ Key_M            ,#0x4004
                     8004    75 .equ Key_Comma        ,#0x8004
                             76 ;; Matrix Line 0x05
                     0105    77 .equ Key_8            ,#0x0105
                     0205    78 .equ Key_7            ,#0x0205
                     0405    79 .equ Key_U            ,#0x0405
                     0805    80 .equ Key_Y            ,#0x0805
                     1005    81 .equ Key_H            ,#0x1005
                     2005    82 .equ Key_J            ,#0x2005
                     4005    83 .equ Key_N            ,#0x4005
                     8005    84 .equ Key_Space        ,#0x8005
                             85 ;; Matrix Line 0x06
                     0106    86 .equ Key_6            ,#0x0106
                     0106    87 .equ Joy1_Up          ,#0x0106
                     0206    88 .equ Key_5            ,#0x0206
                     0206    89 .equ Joy1_Down        ,#0x0206
                     0406    90 .equ Key_R            ,#0x0406
                     0406    91 .equ Joy1_Left        ,#0x0406
                     0806    92 .equ Key_T            ,#0x0806
                     0806    93 .equ Joy1_Right       ,#0x0806
                     1006    94 .equ Key_G            ,#0x1006
                     1006    95 .equ Joy1_Fire1       ,#0x1006
                     2006    96 .equ Key_F            ,#0x2006
                     2006    97 .equ Joy1_Fire2       ,#0x2006
                     4006    98 .equ Key_B            ,#0x4006
                     4006    99 .equ Joy1_Fire3       ,#0x4006
                     8006   100 .equ Key_V            ,#0x8006
                            101 ;; Matrix Line 0x07
                     0107   102 .equ Key_4            ,#0x0107
                     0207   103 .equ Key_3            ,#0x0207
                     0407   104 .equ Key_E            ,#0x0407
                     0807   105 .equ Key_W            ,#0x0807
                     1007   106 .equ Key_S            ,#0x1007
                     2007   107 .equ Key_D            ,#0x2007
                     4007   108 .equ Key_C            ,#0x4007
                     8007   109 .equ Key_X            ,#0x8007
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 4.
Hexadecimal [16-Bits]



                            110 ;; Matrix Line 0x08
                     0108   111 .equ Key_1            ,#0x0108
                     0208   112 .equ Key_2            ,#0x0208
                     0408   113 .equ Key_Esc          ,#0x0408
                     0808   114 .equ Key_Q            ,#0x0808
                     1008   115 .equ Key_Tab          ,#0x1008
                     2008   116 .equ Key_A            ,#0x2008
                     4008   117 .equ Key_CapsLock     ,#0x4008
                     8008   118 .equ Key_Z            ,#0x8008
                            119 ;; Matrix Line 0x09
                     0109   120 .equ Joy0_Up          ,#0x0109
                     0209   121 .equ Joy0_Down        ,#0x0209
                     0409   122 .equ Joy0_Left        ,#0x0409
                     0809   123 .equ Joy0_Right       ,#0x0809
                     1009   124 .equ Joy0_Fire1       ,#0x1009
                     2009   125 .equ Joy0_Fire2       ,#0x2009
                     4009   126 .equ Joy0_Fire3       ,#0x4009
                     8009   127 .equ Key_Del          ,#0x8009
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 5.
Hexadecimal [16-Bits]



                             33 
                             34 ;;====================
                             35 ;;====================
                             36 ;;PUBLIC FUNTIONS
                             37 ;;====================
                             38 ;;====================
                             39 
                             40 
                             41 
                             42 ;; ======================
                             43 ;;	Controls Jump movements
                             44 ;; ======================
   001D                      45 hero_update::
   001D CD 2C 00      [17]   46 	call jumpControl
   0020 CD 81 00      [17]   47 	call checkUserInput
   0023 C9            [10]   48 	ret
                             49 
                             50 
                             51 ;; ======================
                             52 ;;	Controls Jump movements
                             53 ;; ======================
   0024                      54 hero_draw::
   0024 CD AC 00      [17]   55 	call drawHero
   0027 C9            [10]   56 	ret
                             57 
                             58 ;; ======================
                             59 ;;	Controls Jump movements
                             60 ;; ======================
   0028                      61 hero_erase::
   0028 CD AC 00      [17]   62 	call drawHero
   002B C9            [10]   63 	ret
                             64 
                             65 ;;====================
                             66 ;;====================
                             67 ;;PRIVATE FUNCTIONS
                             68 ;;====================
                             69 ;;====================
                             70 
                             71 
                             72 ;; ======================
                             73 ;;	Controls Jump movements
                             74 ;; ======================
   002C                      75 jumpControl:
   002C 3A 02 00      [13]   76 	ld a, (hero_jump)	;;A = Hero_jump in status
   002F FE FF         [ 7]   77 	cp #-1				;;A == -1? (-1 is not jump)
   0031 C8            [11]   78 	ret z				;;If A == -1, not jump
                             79 
                             80 	;;Get Jump Value
   0032 21 06 00      [10]   81 	ld hl, #jumptable	;;HL Points
   0035 4F            [ 4]   82 	ld c, a 			;;|
   0036 06 00         [ 7]   83 	ld b, #0			;;\ BC = A (Offset)
   0038 09            [11]   84 	add hl, bc			;;HL += BC
                             85 
   0039 3A 02 00      [13]   86 	ld a, (hero_jump)	;;A = Hero_jump
   003C FE 0C         [ 7]   87 	cp #0x0C
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 6.
Hexadecimal [16-Bits]



   003E CA 57 00      [10]   88 	jp z, reset
                             89 
                             90 	;;Do Jump Movement
   0041 46            [ 7]   91 	ld b, (hl)			;;B = Jump Movement
   0042 3A 01 00      [13]   92 	ld a, (hero_y)		;;A = Hero_y
   0045 80            [ 4]   93 	add b 				;;A += B (Add jump)
   0046 32 01 00      [13]   94 	ld (hero_y), a 		;; Update Hero Jump
                             95 
                             96 	;;Increment Hero_jump Index
   0049 3A 02 00      [13]   97 	ld a, (hero_jump)	;;A = Hero_jump
   004C FE 0C         [ 7]   98 	cp #0x0C 			;;Check if is latest vallue
   004E 20 02         [12]   99 	jr nz, continue_jump ;;Not latest value, continue
                            100 
                            101 		;;End jump
   0050 3E FE         [ 7]  102 		ld a, #-2
                            103 
   0052                     104 	continue_jump:
   0052 3C            [ 4]  105 	inc a 				;;|
   0053 32 02 00      [13]  106 	ld (hero_jump), a 	;;\ Hero_jump++
                            107 
   0056 C9            [10]  108 	ret
                            109 
   0057                     110 	reset:
   0057 3E FF         [ 7]  111 	ld a, #-1
   0059 32 02 00      [13]  112 	ld (hero_jump), a
   005C C9            [10]  113 	ret
                            114 
                            115 
                            116 
                            117 ;; ======================
                            118 ;;	Starts Hero Jump
                            119 ;; ======================
   005D                     120 startJump:
   005D 3A 02 00      [13]  121 	ld a, (hero_jump)	;;A = hero_jump
   0060 FE FF         [ 7]  122 	cp #-1				;;A == -1? Is jump action
   0062 C0            [11]  123 	ret nz
                            124 
                            125 	;;Jump is inactive, activate it
   0063 3E 00         [ 7]  126 	ld a, #0
   0065 32 02 00      [13]  127 	ld (hero_jump), a
                            128 
                            129 
   0068 C9            [10]  130 	ret
                            131 
                            132 
                            133 
                            134 ;; ======================
                            135 ;; ======================
   0069                     136 moveHeroRight:
   0069 3A 00 00      [13]  137 	ld a, (hero_x)	;;A = hero_x
   006C FE 4E         [ 7]  138 	cp #80-2		;;Check against right limit (screen size - hero size)
   006E 28 04         [12]  139 	jr z, d_not_move_right	;;Hero_x == Limit, do not move
                            140 
   0070 3C            [ 4]  141 	inc a 			;;A++ (hero_x++)
   0071 32 00 00      [13]  142 	ld (hero_x), a 	;;Update hero_x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 7.
Hexadecimal [16-Bits]



                            143 
   0074                     144 	d_not_move_right:
   0074 C9            [10]  145 	ret
                            146 
                            147 
                            148 
                            149 ;; ======================
                            150 ;; ======================
   0075                     151 moveHeroLeft:
   0075 3A 00 00      [13]  152 	ld a, (hero_x)	;;A = hero_x
   0078 FE 00         [ 7]  153 	cp #0		;;Check against left limit (screen size - hero size)
   007A 28 04         [12]  154 	jr z, d_not_move_left	;;Hero_x == Limit, do not move
                            155 
   007C 3D            [ 4]  156 	dec a 			;;A-- (hero_x--)
   007D 32 00 00      [13]  157 	ld (hero_x), a 	;;Update hero_x
                            158 
   0080                     159 	d_not_move_left:
   0080 C9            [10]  160 	ret
                            161 
                            162 ;; ======================
                            163 ;;	Checks User Input and Reacts
                            164 ;;	DESTROYS:
                            165 ;; ======================
   0081                     166 checkUserInput:
                            167 	;;Scan the whole keyboard
   0081 CD 00 00      [17]  168 	call cpct_scanKeyboard_asm ;;keyboard.s
                            169 
                            170 	;;Check for key 'D' being presed
   0084 21 07 20      [10]  171 	ld hl, #Key_D 				;;HL = Key_D
   0087 CD 00 00      [17]  172 	call cpct_isKeyPressed_asm	;;Check if Key_D is presed
   008A FE 00         [ 7]  173 	cp #0						;;Check A == 0
   008C 28 03         [12]  174 	jr z, d_not_pressed			;;Jump if A==0 (d_not_pressed)
                            175 
                            176 	;;D is pressed
   008E CD 69 00      [17]  177 	call moveHeroRight
                            178 
   0091                     179 	d_not_pressed:
                            180 
                            181 	;;Check for key 'A' being presed
   0091 21 08 20      [10]  182 	ld hl, #Key_A 				;;HL = Key_A
   0094 CD 00 00      [17]  183 	call cpct_isKeyPressed_asm	;;Check if Key_A is presed
   0097 FE 00         [ 7]  184 	cp #0						;;Check A == 0
   0099 28 03         [12]  185 	jr z, a_not_pressed			;;Jump if A==0 (a_not_pressed)
                            186 
                            187 	;;A is pressed
   009B CD 75 00      [17]  188 	call moveHeroLeft
                            189 
   009E                     190 	a_not_pressed:
                            191 
                            192 
                            193 	;;Check for key 'W' being presed
   009E 21 07 08      [10]  194 	ld hl, #Key_W 				;;HL = Key_W
   00A1 CD 00 00      [17]  195 	call cpct_isKeyPressed_asm	;;Check if Key_W is presed
   00A4 FE 00         [ 7]  196 	cp #0						;;Check W == 0
   00A6 28 03         [12]  197 	jr z, w_not_pressed			;;Jump if W==0 (w_not_pressed)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 8.
Hexadecimal [16-Bits]



                            198 
                            199 	;;W is pressed
   00A8 CD 5D 00      [17]  200 	call startJump
                            201 
   00AB                     202 	w_not_pressed:
                            203 
   00AB C9            [10]  204 	ret
                            205 
                            206 
                            207 
                            208 ;; ======================
                            209 ;;	Draw the hero
                            210 ;;	DESTROYS: AF, BC, DE, HL
                            211 ;;  Parametrer: a
                            212 ;; ======================
   00AC                     213 drawHero:
                            214 
   00AC F5            [11]  215 	push af 	;;Save A in the stack
                            216 
                            217 	;; Calculate Screen position
   00AD 11 00 C0      [10]  218 	ld de, #0xC000	;;Video memory
                            219 
   00B0 3A 00 00      [13]  220 	ld a, (hero_x)	;;|
   00B3 4F            [ 4]  221 	ld c, a			;;\ C=hero_x
                            222 
   00B4 3A 01 00      [13]  223 	ld a, (hero_y)	;;|
   00B7 47            [ 4]  224 	ld b, a			;;\ B=hero_y
                            225 
   00B8 CD 00 00      [17]  226 	call cpct_getScreenPtr_asm	;;Get pointer to screen
   00BB EB            [ 4]  227 	ex de, hl
                            228 
   00BC F1            [10]  229 	pop AF 		;;A = User selected code
                            230 
                            231 	;; Draw a box
   00BD 01 02 08      [10]  232 	ld bc, #0x0802	;;8x8
   00C0 CD 00 00      [17]  233 	call cpct_drawSolidBox_asm
                            234 
   00C3 C9            [10]  235 	ret
                            236 
